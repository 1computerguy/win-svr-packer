---
- name: Create VM tag category
  vmware_category:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
    category_name: VM
    associable_object_types:
      - Virtual Machine

- name: Gather facts about tag categories
  vmware_category_facts:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
  delegate_to: localhost
  register: all_tag_category_facts

- debug:
    var: all_tag_category_facts
  when: debugverbose == True

- name: Create the parent folders
  vcenter_folder:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password}}"
    validate_certs: False
    datacenter: "{{ vcenter_datacenter }}"
    folder_name: "{{ item.folder_name }}"
    parent_folder: "{{ item.parent_folder }}"
  with_items:
    "{{ vcenter_folders }}"
  when: 
    - vcenter_folders[item].parent_folder is not defined

- name: Create the sub folders
  vcenter_folder:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password}}"
    validate_certs: False
    datacenter: "{{ vcenter_datacenter }}"
    folder_name: "{{ item.folder_name }}"
    parent_folder: "{{ item.parent_folder }}"
  with_items:
    "{{ vcenter_folders }}"
  when: 
    - vcenter_folders[item].parent_folder is defined

- name: Create tags
  vmware_tag:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password}}"
    validate_certs: False
    category_id: "{{ item[0].category_id }}"
    tag_name: "{{ item[1] }}"
  with_nested: 
    - "{{ all_tag_category_facts['tag_category_facts'] }}"
    - "{{ tags }}"
  when: item[0].category_name == "VM"

- name: Clone the template
  vmware_guest:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password}}"
    validate_certs: False
    name: "{{ item.name }}"
    template: "{{ template_name }}"
    datacenter: "{{ vcenter_datacenter }}"
    folder: "{{ item.folder }}"
    state: poweredon
    cluster: "{{ vcenter_cluster }}"
    networks:
      - 
        name: "{{ item.networks.0.name }}"
        ip: "{{ item.networks.0.ip }}"
        netmask: "{{ item.networks.0.netmask }}"
        gateway: "{{ item.networks.0.gateway }}"
        domain: "{{ item.networks.0.domain }}"
        dns_servers:
        - "{{ item.networks.0.dns_servers.0 | default() }}"
        - "{{ item.networks.0.dns_servers.1 | default() }}"
        connected: true
        start_connected: true
    customization:
      autologon: yes
      password: "{{ winrm_password }}"
    wait_for_ip_address: false
    wait_for_customization: false
    wait_for_customization_timeout: 6000
  with_items:
    "{{ vms }}"
  delegate_to: localhost

- name: Ensure all network adapters are connected
  vmware_guest_network:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password}}"
    validate_certs: False
    datacenter: "{{ vcenter_datacenter }}"
    cluster: "{{ vcenter_cluster }}"
    name: "{{ item.name }}"
    folder: "{{ item.folder }}"
    network_name: "{{ item.networks.0.name }}"
    label: "Network adapter 1"
    device_type: vmxnet3
    connected: true
    start_connected: true
  loop: "{{ vms }}"

- name: Tag VMs
  vmware_tag_manager:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password}}"
    validate_certs: False
    tag_names: "{{ item.tags }}"
    object_type: VirtualMachine
    object_name: "{{ item.name }}"
  loop: "{{ vms }}"

- name: Gather info about VMs and register
  vmware_guest_info:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password}}"
    validate_certs: False
    datacenter: "{{ vcenter_datacenter }}"
    tags: True
    #schema: vsphere
    name: "{{ item.name }}"
    folder: "{{ item.folder }}"
  loop: "{{ vms }}"
  register: vminfo

- debug:
    var: vminfo
  when: debugverbose == True